type Query {
  findSeats: [Seat]
  findSeat(_id: ID!): Seat
}

type Mutation {
  createSeat(input: CreateSeatInput): Seat
  updateSeat(id: ID, input: UpdateSeatInput): Result
  setSeatsTags(ids: [ID], tags: [String]): Result
  pushSeatsTags(ids: [ID], tags: [String]): Result
  pullSeatsTags(ids: [ID], tags: [String]): Result
}

type Subscription {
  seatCreated: Seat
}

type Seat implements Document {
  _id: ID! @upper
  createdAt: String
  updatedAt: String

  id: ID!
  name: String
  description: String
  cover: String
  icon: String
  tags: [String]
  status: String
  disabled: Boolean
}

input CreateSeatInput {
  id: ID!
  name: String
  description: String
  cover: String
  icon: String
}

input UpdateSeatInput {
  name: String
  description: String
  cover: String
  icon: String
  tags: [String]
  status: String
  disabled: Boolean
}
